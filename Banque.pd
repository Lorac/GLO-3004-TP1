const NOMBRE_MAXIMAL_COMPTE:int ^= 20000;

class Date ^=
abstract
  var
    jour: int, 
    mois: int, 
    an: int;
	
		confined
		function estBissextile : bool
			^= 0 in set of int {an % 400} ++ (set of int {an % 4} -- set of int {an % 100});

end;

class Compte ^=
abstract
	var numero: int,
	solde: real,
	nip : int,
	dateOuverture : Date,
	dateFermeture : Date;
	
invariant
    numero in 1..19999;
	
//	confined
//		function estOuvert : bool
//			dateOuverture.jour = 5
		
interface
	build{d:Date, numeroIdentification:int, numeroCompte:int}
		post
			dateOuverture! = d,
			numero! = numeroCompte,
			nip! = numeroIdentification,
			dateFermeture! = d,
			solde! = 0.0;
			
			
	schema !ModifierSolde(nouveauSolde:real)
//			dateOuverture caller estOuvert
//			dateFermeture = null
		post
			solde! = nouveauSolde;
			
	schema !ModifierNIP(ni:int)
		post
			nip! = ni
		

end;

class Banque ^=
abstract

	var comptes: map of (int -> Compte);
	
	invariant
		#(comptes) >= NOMBRE_MAXIMAL_COMPTE
interface
	// Add public access function, selector and method declarations here...
	// ...
	build{}
		post ?;

end;
// End
