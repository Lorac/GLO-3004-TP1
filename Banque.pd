const NOMBRE_MAXIMAL_COMPTE:int ^= 20000;

class Date ^=
abstract
  var
    jour: int, 
    mois: int, 
    an: int;
	
	confined
		function estBissextile : bool
			^= 0 in set of int {an % 400} ++ (set of int {an % 4} -- set of int {an % 100});
	
	interface
		build{j:int, m:int, y:int}
			pre
				j in 1..31,
				m in 1..12
			post
				jour! = j,
				mois! = m,
				an! = y;
	
	//interface
		//function NombreJoursDifference(date:Date)
end;

class Compte ^=
abstract
	var numero: int,
	solde: real,
	nip : int,
	dateOuverture : Date,
	dateFermeture : Date || void;
	
invariant
    numero in 1..19999;
	
//	confined
//		function estOuvert : bool
//			dateOuverture.jour = 5
		
interface
	build{numeroCompte:int, s:real, d:Date}
		post
			dateOuverture! = d,
			numero! = numeroCompte,
			nip! = 0,
			dateFermeture! = null,
			solde! = s;
			
			
	schema !ModifierSolde(nouveauSolde:real)
		pre
//			dateOuverture caller estOuvert
			dateFermeture = null
		post
			solde! = nouveauSolde;
			
	schema !ModifierNIP(ni:int)
		pre
			ni > 0,
			nip ~= ni
		post
			nip! = ni;
			
	schema !ModifierDateFermeture(d:Date || void)
		pre 
			d ~= null
		post
			dateFermeture! = d;
	
	function GetDateOuverture:Date
		^= dateOuverture;
	
	function GetSolde:real
		^= solde;
	
	function GetDateFermeture:Date || void
		^= dateFermeture;

		
end;

class Banque ^=
abstract

	var comptes: map of (int -> Compte);
	
	invariant
		#(comptes) >= NOMBRE_MAXIMAL_COMPTE
		
interface
	// Add public access function, selector and method declarations here...
	// ...
	build{}
		post 
			comptes! = map of (int -> Compte){};
		
	schema !OuvrirCompte(numeroCompte:int, solde:real, dateCourante:Date)
		pre
			solde > 0.0,
			numeroCompte ~in comptes.dom
		post
			comptes! = comptes.append(numeroCompte -> Compte{numeroCompte, solde, dateCourante});
			
	schema !FermerUnCompte(numeroCompte:int, dateCourante:Date || void)
		pre
			numeroCompte in comptes.dom,
			dateCourante ~= null,
			comptes[numeroCompte].GetSolde = 0.0,
			comptes[numeroCompte].GetDateFermeture = null
		post	
			comptes[numeroCompte]!ModifierDateFermeture(dateCourante);
			
	schema !SupprimerUnCompte(numeroCompte:int, dateCourante:Date || void)
		pre
			numeroCompte in comptes.dom,
			dateCourante ~= null,
			comptes[numeroCompte].GetSolde = 0.0,
			comptes[numeroCompte].GetDateFermeture ~= null
			//comptes[numeroCompte].GetDateFermeture
		post
			comptes! = comptes.remove(numeroCompte);
			
	schema !ModifierSolde(numeroCompte:int, solde:real)
		pre
			numeroCompte in comptes.dom
		post
			comptes[numeroCompte]!ModifierSolde(solde);
		
	schema !ModifierNip(numeroCompte:int, nip:int)
		pre
			numeroCompte in comptes.dom
		post
			comptes[numeroCompte]!ModifierNIP(nip);
			

end;
// End